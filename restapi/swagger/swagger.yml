swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /db/:
    get:
      tags:
      - db
      description: get all Users
      operationId: DbController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
  /db/{tablename}:
    delete:
      tags:
      - db
      description: delete the Table
      operationId: DbController.Delete
      parameters:
      - in: path
        name: tablename
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: tablename is empty
  /db/{tablename}/{key}:
    get:
      tags:
      - db
      description: get user by uid
      operationId: DbController.Get
      parameters:
      - in: path
        name: tablename
        description: The key for staticblock
        required: true
        type: string
      - in: path
        name: key
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Bucket'
        "403":
          description: :tablename is empty
  /db/{uid}:
    put:
      tags:
      - db
      description: update the user
      operationId: DbController.Update
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is not int
  /db/kv:
    post:
      tags:
      - db
      description: create users
      operationId: DbController.CreateBucket
      parameters:
      - in: body
        name: body
        description: body for Bucket content
        required: true
        schema:
          $ref: '#/definitions/models.Bucket'
      responses:
        "200":
          description: '{int} models.Bucket.Key'
        "403":
          description: body is empty
  /db/tables:
    get:
      tags:
      - db
      description: get all Tables
      operationId: DbController.GetAllTables
      responses:
        "200":
          description: '{string} success'
    post:
      tags:
      - db
      description: create users
      operationId: DbController.CreateUser
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.Bucket'
      responses:
        "200":
          description: '{int} models.Tablename'
        "403":
          description: body is empty
  /object/:
    get:
      tags:
      - object
      description: get all objects
      operationId: ObjectController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    post:
      tags:
      - object
      description: create object
      operationId: ObjectController.Create
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: '{string} models.Object.Id'
        "403":
          description: body is empty
  /object/{objectId}:
    get:
      tags:
      - object
      description: find object by objectid
      operationId: ObjectController.Get
      parameters:
      - in: path
        name: objectId
        description: the objectid you want to get
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    put:
      tags:
      - object
      description: update the object
      operationId: ObjectController.Update
      parameters:
      - in: path
        name: objectId
        description: The objectid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    delete:
      tags:
      - object
      description: delete the object
      operationId: ObjectController.Delete
      parameters:
      - in: path
        name: objectId
        description: The objectId you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: objectId is empty
  /user/info:
    get:
      tags:
      - user
      description: 获取用户信息
      operationId: AdminController.Get
      parameters:
      - in: query
        name: token
        description: 在namespace下的limitrange名称
        required: true
        type: string
      responses:
        "200":
          description: '{string} k8s.io/api/core/v1/LimitRange'
        "403":
          description: nothing input
  /user/login:
    post:
      tags:
      - user
      description: 登陆验证
      operationId: AdminController.Login
      parameters:
      - in: body
        name: body
        description: 登陆验证
        required: true
        schema:
          $ref: '#/definitions/models.AdminUser'
      responses:
        "200":
          description: '{string} models.AdminUser.Username'
        "403":
          description: body is empty
  /user/logout:
    post:
      tags:
      - user
      description: 登陆验证
      operationId: AdminController.LogOut
      responses:
        "200":
          description: '{string} models.AdminUser.Username'
        "403":
          description: body is empty
definitions:
  models.AdminUser:
    title: AdminUser
    type: object
    properties:
      password:
        type: string
      username:
        type: string
  models.Bucket:
    title: Bucket
    type: object
    properties:
      key:
        type: string
      tablename:
        type: string
      value:
        type: string
  models.Object:
    title: Object
    type: object
    properties:
      ObjectId:
        type: string
      PlayerName:
        type: string
      Score:
        type: integer
        format: int64
  models.Profile:
    title: Profile
    type: object
    properties:
      Address:
        type: string
      Age:
        type: integer
        format: int64
      Email:
        type: string
      Gender:
        type: string
  models.User:
    title: User
    type: object
    properties:
      Id:
        type: string
      Password:
        type: string
      Profile:
        $ref: '#/definitions/models.Profile'
      Username:
        type: string
tags:
- name: object
  description: |
    Operations about object
- name: db
  description: |
    Operations about Bucket
- name: user
  description: |
    后端系统认证
